name: Build and Test Installer

on:
  push:
    branches: [ main ]
    tags: ['v*']
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build installer
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set version variables
        id: version
        run: |
          # Extract version with 'v' prefix for GitHub paths
          TAG_VERSION=${{ github.ref_name }}
          # Extract version without the 'v' prefix for script
          CLEAN_VERSION=$(echo $TAG_VERSION | sed 's/^v//')

          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

      - name: Set versions in install.m4
        run: |
          # Fetch latest versions
          KMD_VERSION=$(gh api repos/tenstorrent/tt-kmd/releases/latest | jq -r '.tag_name')
          FW_VERSION=$(gh api repos/tenstorrent/tt-firmware/releases/latest | jq -r '.tag_name')
          SMI_VERSION=$(gh api repos/tenstorrent/tt-smi/releases/latest | jq -r '.tag_name')
          FLASH_VERSION=$(gh api repos/tenstorrent/tt-flash/releases/latest | jq -r '.tag_name')
          TOPOLOGY_VERSION=$(gh api repos/tenstorrent/tt-topology/releases/latest | jq -r '.tag_name')
          SYSTOOLS_VERSION=$(gh api repos/tenstorrent/tt-system-tools/releases/latest | jq -r '.tag_name')
          SFPI_VERSION=$(gh api repos/tenstorrent/sfpi/releases/latest | jq -r '.tag_name')

          # Clean up the versions tags
          KMD_VERSION=${KMD_VERSION#ttkmd-}
          FW_VERSION=${FW_VERSION#v}
          SYSTOOLS_VERSION=${SYSTOOLS_VERSION#v}

          # Replace the placeholder with actual version
          # Use | as a delimited because / can sometimes show up in the input
          sed -i "s|__INSTALLER_DEVELOPMENT_BUILD__|${{ steps.version.outputs.clean_version }}|g" install.m4
          sed -i "s|__TEMPLATE_KMD_VERSION__|${KMD_VERSION}|g" install.m4
          sed -i "s|__TEMPLATE_FW_VERSION__|${FW_VERSION}|g" install.m4
          sed -i "s|__TEMPLATE_SMI_VERSION__|${SMI_VERSION}|g" install.m4
          sed -i "s|__TEMPLATE_FLASH_VERSION__|${FLASH_VERSION}|g" install.m4
          sed -i "s|__TEMPLATE_TOPOLOGY_VERSION__|${TOPOLOGY_VERSION}|g" install.m4
          sed -i "s|__TEMPLATE_SYSTOOLS_VERSION__|${SYSTOOLS_VERSION}|g" install.m4
          sed -i "s|__TEMPLATE_SFPI_VERSION__|${SFPI_VERSION}|g" install.m4

          # Display the change for verification in workflow logs
          echo "Updated install.m4 with version ${{ steps.version.outputs.clean_version }}"
          echo "KMD_VERSION: ${KMD_VERSION}"
          echo "FW_VERSION: ${FW_VERSION}"
          echo "SMI_VERSION: ${SMI_VERSION}"
          echo "FLASH_VERSION: ${FLASH_VERSION}"
          echo "TOPOLOGY_VERSION: ${TOPOLOGY_VERSION}"
          echo "SYSTOOLS_VERSION: ${SYSTOOLS_VERSION}"
          echo "SFPI_VERSION: ${SFPI_VERSION}"

      - name: Generate install.sh from install.m4
        run: |
          docker run --rm \
            -e PROGRAM=argbash \
            -v "$(pwd):/work" \
            -u "$(id -u):$(id -g)" \
            matejak/argbash \
            install.m4 -o install.sh

      - name: Upload install.sh as artifact
        uses: actions/upload-artifact@v4
        with:
          name: install-script
          path: install.sh

  test-installer:
    name: Test installer
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro:
          - ubuntu:22.04
          - ubuntu:24.04
          - debian:12

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download install.sh
      uses: actions/download-artifact@v4
      with:
        name: install-script

    - name: Test in container
      run: |
        docker run --rm -v "$PWD:/workspace" -w /workspace ${{ matrix.distro }} bash -c "
          set -e

          # Update package manager and install sudo
          if command -v apt >/dev/null; then
            apt update
            apt install -y git python3-pip jq curl sudo
          fi

          # Create a non-root user for testing
          useradd -m -s /bin/bash testuser
          echo 'testuser ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/testuser

          # Copy workspace to user home and change ownership
          cp -r /workspace /home/testuser/workspace
          chown -R testuser:testuser /home/testuser/workspace

          # Switch to test user and run installer
          su - testuser -c '
            cd /home/testuser/workspace

            # Test configuration (skip hardware-dependent steps)
            export TT_MODE_NON_INTERACTIVE=0
            export TT_INSTALL_KMD=1
            export TT_INSTALL_HUGEPAGES=1
            export TT_UPDATE_FIRMWARE=1
            export TT_INSTALL_METALIUM_CONTAINER=1
            export TT_SFPI_INSTALL=1
            export TT_PYTHON_CHOICE=new-venv
            export TT_REBOOT_OPTION=never

            # Run installer
            timeout 600 bash install.sh || {
              echo \"Installer timed out or failed\"
              exit 1
            }

            echo \"✓ Installer completed successfully in container mode\"
          '
        "

  test-fedora:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro:
          - fedora:41
          - fedora:42

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download install.sh
      uses: actions/download-artifact@v4
      with:
        name: install-script

    - name: Test in Fedora container
      run: |
        docker run --rm -v "$PWD:/workspace" -w /workspace ${{ matrix.distro }} bash -c "
          set -e

          # Update package manager and install sudo
          dnf update -y
          dnf install -y git python3-pip jq curl sudo

          # Create a non-root user for testing
          useradd -m -s /bin/bash testuser
          echo 'testuser ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/testuser

          # Copy workspace to user home and change ownership
          cp -r /workspace /home/testuser/workspace
          chown -R testuser:testuser /home/testuser/workspace

          # Switch to test user and run installer
          su - testuser -c '
            cd /home/testuser/workspace

            # Test configuration (skip hardware-dependent steps)
            export TT_MODE_NON_INTERACTIVE=0
            export TT_INSTALL_KMD=1
            export TT_INSTALL_HUGEPAGES=1
            export TT_UPDATE_FIRMWARE=1
            export TT_INSTALL_METALIUM_CONTAINER=1
            export TT_SFPI_INSTALL=1
            export TT_PYTHON_CHOICE=new-venv
            export TT_REBOOT_OPTION=never

            # Run installer
            timeout 300 bash install.sh || {
              echo \"Installer timed out or failed\"
              exit 1
            }

            echo \"✓ Installer completed successfully in Fedora\"
          '
        "

  test-template-syntax:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test template syntax
      run: |
        shellcheck install.m4
        echo "✓ Template syntax is valid"

  test-script-syntax:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download install.sh
      uses: actions/download-artifact@v4
      with:
        name: install-script

    - name: Test script syntax
      # If this fails, we should be warned but not stop entirely
      continue-on-error: true
      run: |
        shellcheck install.sh
        echo "✓ Script syntax is valid"

  test-environment-variables:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download install.sh
      uses: actions/download-artifact@v4
      with:
        name: install-script

    - name: Test environment variable parsing
      run: |
        # Test that all documented environment variables are recognized
        export TT_SKIP_INSTALL_KMD=0
        export TT_SKIP_INSTALL_HUGEPAGES=0
        export TT_SKIP_UPDATE_FIRMWARE=0
        export TT_SKIP_INSTALL_PODMAN=0
        export TT_SKIP_INSTALL_METALIUM_CONTAINER=0
        export TT_SKIP_INSTALL_SFPI=0
        export TT_PYTHON_CHOICE=3
        export TT_REBOOT_OPTION=2
        export TT_MODE_CONTAINER=0
        export TT_MODE_NON_INTERACTIVE=0
        export TT_NEW_VENV_LOCATION=/tmp/test-venv
        export TT_METALIUM_IMAGE_URL=test.example.com/image
        export TT_METALIUM_IMAGE_TAG=test-tag


        # Dry run to check variable parsing
        timeout 30 bash install.sh 2>&1 | head -20 || true

        echo "✓ Environment variables are properly recognized"

  test-version-fetching:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download install.sh
      uses: actions/download-artifact@v4
      with:
        name: install-script

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y jq

    - name: Test version fetching functions
      run: |
        # Source the script to test individual functions
        set +e  # Don't exit on function failures

        # Extract and test the version fetching functions
        source <(grep -A 10 "fetch_latest_.*_version()" install.sh)

        echo "Testing version fetch functions..."

        # Test KMD version fetching
        if kmd_ver=$(fetch_latest_kmd_version); then
          echo "✓ KMD version fetched: $kmd_ver"
        else
          echo "⚠ KMD version fetch failed (may be rate limited)"
        fi

        # Test FW version fetching
        if fw_ver=$(fetch_latest_fw_version); then
          echo "✓ FW version fetched: $fw_ver"
        else
          echo "⚠ FW version fetch failed (may be rate limited)"
        fi

        # Test other version fetches
        if systools_ver=$(fetch_latest_systools_version); then
          echo "✓ System tools version fetched: $systools_ver"
        else /bin/bash -c "$(curl -fsSL https://github.com/knauth/tt-installer/releases/download//install.sh)"
          echo "⚠ System tools version fetch failed (may be rate limited)"
        fi

        if smi_ver=$(fetch_latest_smi_version); then
          echo "✓ SMI version fetched: $smi_ver"
        else
          echo "⚠ SMI version fetch failed (may be rate limited)"
        fi

        if flash_ver=$(fetch_latest_flash_version); then
          echo "✓ Flash version fetched: $flash_ver"
        else
          echo "⚠ Flash version fetch failed (may be rate limited)"
        fi

        echo "✓ Version fetching functions are working"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    # Only run if the build workflow completed successfully AND it was triggered by a version tag
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, test-installer, test-fedora]

    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Checkout the tag that triggered the original workflow
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Download artifacts from build workflow
        uses: actions/download-artifact@v4
        with:
          name: install-script

      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          mode: "HYBRID" # Include both PRs and direct commits
          configurationJSON: |
            {
              "template": "#{{CHANGELOG}}\n\n## Contributors\n#{{CONTRIBUTORS}}\n\n## Installation\n\nInstall this version with:\n```bash\n/bin/bash -c \"$(curl -fsSL https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/install.sh)\"\n```\n\nLatest version can always be installed using:\n```bash\n/bin/bash -c \"$(curl -fsSL https://github.com/${{ github.repository }}/releases/latest/download/install.sh)\"\n```",
              "categories": [
                {
                  "title": "## 🔄 Changes",
                  "labels": []
                }
              ],
              "pr_template": "- #{{TITLE}} (#{{NUMBER}}) by @#{{AUTHOR}}",
              "commit_template": "- #{{TITLE}} (#{{MERGE_SHA}}) by @#{{AUTHOR}}"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: install.sh
          body: ${{ steps.build_changelog.outputs.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
