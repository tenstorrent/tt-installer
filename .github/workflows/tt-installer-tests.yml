name: TT-Installer Tests

on:
  push:
    branches: [main, issue/12]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      run_all_tests:
        description: 'Run all test scenarios'
        default: false
        type: boolean

jobs:
  prepare-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.run_all_tests }}" == "true" ]]; then
            echo 'matrix={"os":["ubuntu-20.04","ubuntu-22.04","fedora-latest"],"mode":["normal","container","no-metalium","dev-mode"]}' >> $GITHUB_OUTPUT
          else
            echo 'matrix={"os":["ubuntu-22.04"],"mode":["normal","container"]}' >> $GITHUB_OUTPUT
          fi

  test-installer:
    needs: prepare-test-matrix
    strategy:
      matrix: ${{ fromJson(needs.prepare-test-matrix.outputs.test-matrix) }}
      fail-fast: false
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.os == 'ubuntu-20.04' && 'ubuntu:20.04' || matrix.os == 'ubuntu-22.04' && 'ubuntu:22.04' || matrix.os == 'fedora-latest' && 'fedora:latest' }}
      options: --privileged  # Needed for device mocks

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup mock environment
        run: |
          # Create mock devices with proper permissions
          mkdir -p /dev
          touch /dev/tenstorrent_0
          touch /dev/tenstorrent_1
          chmod 666 /dev/tenstorrent_*

          # Install basic dependencies
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            apt-get update
            apt-get install -y curl wget git python3 python3-pip python3-venv
          elif [[ "${{ matrix.os }}" == "fedora-latest" ]]; then
            dnf install -y curl wget git python3 python3-pip
          fi

          # Create mock scripts in system path
          mkdir -p /usr/local/bin
          
          # tt-smi mock
          tee /usr/local/bin/tt-smi > /dev/null <<'EOF'
          #!/bin/bash
          echo "TT-SMI v0.1.0"
          echo "Found 2 Tenstorrent devices"
          echo "Device 0: Grayskull (Serial: GS000001)"
          echo "  PCI: 0000:01:00.0"
          echo "  Memory: 16GB"
          echo "  Temperature: 45°C"
          echo "Device 1: Wormhole (Serial: WH000001)"
          echo "  PCI: 0000:02:00.0"
          echo "  Memory: 32GB"
          echo "  Temperature: 47°C"
          EOF
          chmod +x /usr/local/bin/tt-smi

          # tt-flash mock
          tee /usr/local/bin/tt-flash > /dev/null <<'EOF'
          #!/bin/bash
          echo "TT-Flash v0.1.0"
          echo "Firmware update successful"
          exit 0
          EOF
          chmod +x /usr/local/bin/tt-flash

          # modinfo mock
          tee /usr/local/bin/modinfo > /dev/null <<'EOF'
          #!/bin/bash
          if [[ "$1" == "-F" && "$2" == "version" && "$3" == "tenstorrent" ]]; then
            exit 1
          fi
          EOF
          chmod +x /usr/local/bin/modinfo

          # docker mock
          tee /usr/local/bin/docker > /dev/null <<'EOF'
          #!/bin/bash
          if [[ "$1" == "pull" ]]; then
            echo "Successfully pulled $2"
          elif [[ "$1" == "run" ]]; then
            echo "Would run container with args: $@"
          fi
          exit 0
          EOF
          chmod +x /usr/local/bin/docker

      - name: Prepare installer script
        run: |
          mkdir -p tt-installer
          cp install.sh tt-installer/
          chmod +x tt-installer/install.sh

      - name: Run installer
        env:
          TT_NON_INTERACTIVE: 0
          TT_AUTO_REBOOT: 0
          TT_MODE_CONTAINER: ${{ matrix.mode == 'container' && '0' || '1' }}
          TT_SKIP_INSTALL_METALIUM: ${{ matrix.mode == 'no-metalium' && '0' || '1' }}
          TT_METALIUM_DEV_MODE: ${{ matrix.mode == 'dev-mode' && '1' || '0' }}
        run: |
          cd tt-installer
          ./install.sh

      - name: Verify installation
        run: |
          # Check log file in container's /tmp
          LOG_FILE=$(find /tmp -name "install.log" | head -1)
          if [[ -f "$LOG_FILE" ]]; then
            echo "✅ Install log found: $LOG_FILE"
            
            # Verify mode-specific messages
            case "${{ matrix.mode }}" in
              container)
                grep -q "Running in container mode" "$LOG_FILE" || (echo "❌ Missing container mode log"; exit 1)
                ;;
              no-metalium)
                grep -q "Skipping TT-Metalium installation" "$LOG_FILE" || (echo "❌ Missing Metalium skip log"; exit 1)
                ;;
              dev-mode)
                grep -q "developer mode enabled" "$LOG_FILE" || (echo "❌ Missing dev mode log"; exit 1)
                ;;
            esac
          else
            echo "❌ Install log not found!"
            exit 1
          fi

          # Check tt-metalium script
          if [[ "${{ matrix.mode }}" == "normal" || "${{ matrix.mode }}" == "dev-mode" ]]; then
            if [[ -f "$HOME/.local/bin/tt-metalium" ]]; then
              echo "✅ tt-metalium script exists"
              # Add content checks here
            else
              echo "❌ tt-metalium script missing"
              exit 1
            fi
          else
            if [[ -f "$HOME/.local/bin/tt-metalium" ]]; then
              echo "❌ tt-metalium should not exist"
              exit 1
            fi
          fi

          echo "All verifications passed! ✅"